name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main  # 當程式碼推送到 main 分支時觸發

jobs:
  build-and-deploy:
    name: Build and Deploy Docker Image to AWS ECR
    runs-on: ubuntu-latest

    steps:
      # Step 1: 檢出程式碼
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: 設定 AWS 認證與區域
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: 登入 AWS ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: 建構 Docker 映像
      - name: Build Docker image
        run: |
          IMAGE_TAG=latest
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG .

      # Step 5: 推送 Docker 映像到 AWS ECR
      - name: Push Docker image to Amazon ECR
        run: |
          IMAGE_TAG=latest
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG

      # Step 6: 確保 Lambda 以容器映像 (packageType=Image) 存在並更新程式
      - name: Ensure Lambda is Image-based and Update
        run: |
          FUNCTION_NAME=${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
          REPO_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest"
          ROLE_ARN=${{ secrets.AWS_LAMBDA_ROLE_ARN }}

          echo "Checking if Lambda function [$FUNCTION_NAME] exists..."
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $FUNCTION_NAME 2>&1 || true)

          if [[ $FUNCTION_EXISTS == *"ResourceNotFoundException"* ]]; then
            # 函數不存在，直接建立 Image 型函數
            echo "Function [$FUNCTION_NAME] does not exist. Creating a new Image-based function..."
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --package-type Image \
              --code ImageUri="$REPO_URI" \
              --role "$ROLE_ARN" \
              --region ${{ secrets.AWS_REGION }}
          else
            # 函數已存在，檢查它的 packageType
            PACKAGE_TYPE=$(aws lambda get-function-configuration \
              --function-name "$FUNCTION_NAME" \
              --query 'PackageType' \
              --output text \
              --region ${{ secrets.AWS_REGION }})

            if [ "$PACKAGE_TYPE" = "Zip" ]; then
              # 如果是 Zip，就刪除再重建
              echo "Function [$FUNCTION_NAME] is currently Zip-based. Deleting it..."
              aws lambda delete-function \
                --function-name "$FUNCTION_NAME" \
                --region ${{ secrets.AWS_REGION }}

              echo "Creating a new Image-based function with the same name..."
              aws lambda create-function \
                --function-name "$FUNCTION_NAME" \
                --package-type Image \
                --code ImageUri="$REPO_URI" \
                --role "$ROLE_ARN" \
                --region ${{ secrets.AWS_REGION }}
            else
              # 已是 Image 型，直接更新
              echo "Function [$FUNCTION_NAME] is already Image-based. Updating code..."
              aws lambda update-function-code \
                --function-name "$FUNCTION_NAME" \
                --image-uri "$REPO_URI" \
                --region ${{ secrets.AWS_REGION }}
            fi
          fi
